package service

import (
	"fmt"

	"github.com/taraslis453/territory-service-bot/config"
	"github.com/taraslis453/territory-service-bot/pkg/logging"
	tb "gopkg.in/telebot.v3"
)

// Services stores all service layer interfaces
type Services struct {
	Bot BotService
}

// Options provides options for creating a new service instance via New.
type Options struct {
	Cfg      *config.Config
	Logger   logging.Logger
	Storages Storages
}

// serviceContext provides a shared context for all services
type serviceContext struct {
	cfg      *config.Config
	logger   logging.Logger
	storages Storages
}

type BotService interface {
	HandleStart(c tb.Context) error
	HandleMessage(c tb.Context, b *tb.Bot) error
	RenderMenu(c tb.Context) error
	HandleButton(c tb.Context) error
	HandleImageUpload(c tb.Context) error
}

var (
	MessageEnterCongregationName       = "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∑–±–æ—Ä—É, —è–∫—É –≤–∞–º –Ω–∞–¥–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä ‚úçÔ∏è"
	MessageUserNotFound                = "–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑–±–æ—Ä—É üìû"
	MessageCongregationNotFound        = "–ó–±—ñ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ü§∑"
	MessageCongregationAdminNotFound   = "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Äa –∑–±–æ—Ä—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ü§∑"
	MessageUserIsNotAdmin              = "–í–∏ –Ω–µ —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∑–±–æ—Ä—É ü§∑"
	MessageCongregationJoinRequestSent = func(congregationName string) string {
		return fmt.Sprintf("–ó–∞–ø–∏—Ç –Ω–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –∑–±–æ—Ä—É *%s* –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ. –û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å üòå", congregationName)
	}
	MessageWaitingForAdminApproval = "–û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑–±–æ—Ä—É üòå"
	MessageNewJoinRequest          = func(options *MessageNewJoinRequestOptions) string {
		userFullName := fmt.Sprintf("%s %s", options.FirstName, options.LastName)
		if options.Username != "" {
			userFullName += fmt.Sprintf(" (@%s)", options.Username)
		}
		message := fmt.Sprint("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ", userFullName, " —Ö–æ—á–µ –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è")
		return message
	}
	MessageHowCanIHelpYou          = "–ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏? üôÇ"
	MessageAddTerritoryInstruction = "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó –¥–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑—Ä–∞–∑–∫—É: *–ì—Ä—É–ø–∞_–Ω–∞–∑–≤–∞* \n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: *–õ—å–≤—ñ–≤_123-–∞*, *–†—ñ–≤–Ω–µ_200* üì∏"
	MessageTerritoryExistsInGroup  = func(title string, groupTitle string) string {
		return fmt.Sprintf("–¢–µ—Ä–∏—Ç–æ—Ä—ñ—è –∑ –Ω–∞–∑–≤–æ—é *%s* –≤–∂–µ —ñ—Å–Ω—É—î –≤ –≥—Ä—É–ø—ñ *%s* ü§∑", title, groupTitle)
	}
	MessageNoTerritoriesFound = "–¢–µ—Ä–∏—Ç–æ—Ä—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ü§∑"
	MessageTerritoryList      = "–°–ø–∏—Å–æ–∫ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–π:"
)

type MessageNewJoinRequestOptions struct {
	FirstName string
	LastName  string
	Username  string
}
