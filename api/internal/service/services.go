package service

import (
	"fmt"
	"time"

	"github.com/taraslis453/territory-service-bot/config"
	"github.com/taraslis453/territory-service-bot/internal/entity"
	"github.com/taraslis453/territory-service-bot/pkg/logging"
	tb "gopkg.in/telebot.v3"
)

// Services stores all service layer interfaces
type Services struct {
	Bot BotService
}

// Options provides options for creating a new service instance via New.
type Options struct {
	Cfg      *config.Config
	Logger   logging.Logger
	Storages Storages
}

// serviceContext provides a shared context for all services
type serviceContext struct {
	cfg      *config.Config
	logger   logging.Logger
	storages Storages
}

type BotService interface {
	HandleStart(c tb.Context, b *tb.Bot) error
	HandleMessage(c tb.Context, b *tb.Bot) error
	RenderMenu(c tb.Context, b *tb.Bot) error
	HandleInlineButton(c tb.Context, b *tb.Bot) error
	HandleImageUpload(c tb.Context, b *tb.Bot) error
	HandleDocumentUpload(c tb.Context, b *tb.Bot) error
}

var (
	MessageEnterFullName               = "–Ø–∫ –º–µ–Ω—ñ —Ç–µ–±–µ –∑–∞–ø–∞–º'—è—Ç–∞—Ç–∏? (—ñ–º‚Äô—è —Ç–∞ —Ñ–∞–º—ñ–ª—ñ—è) ‚úçÔ∏è"
	MessageEnterCongregationName       = "–ó —è–∫–æ–≥–æ —Ç–∏ –∑–±–æ—Ä—É? ‚úçÔ∏è"
	MessageUserNotFound                = "–¢–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º—ñ. –ó–≤–µ—Ä–Ω–∏—Å—å –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑–±–æ—Ä—É üìû"
	MessageCongregationNotFound        = "–ó–±—ñ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ü§∑"
	MessageCongregationAdminNotFound   = "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Äa –∑–±–æ—Ä—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ü§∑"
	MessageUserIsNotAdmin              = "–¢–∏ –Ω–µ —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∑–±–æ—Ä—É ü§∑"
	MessageCongregationJoinRequestSent = func(congregationName string) string {
		return fmt.Sprintf("–ó–∞–ø–∏—Ç –Ω–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –∑–±–æ—Ä—É *%s* –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ. –û—á—ñ–∫—É–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å üòå", congregationName)
	}
	MessageWaitingForAdminApproval = "–û—á—ñ–∫—É–π –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑–±–æ—Ä—É üòå"
	MessageNewJoinRequest          = func(options *MessageNewJoinRequestOptions) string {
		userFullName := fmt.Sprintf("%s %s", options.FirstName, options.LastName)
		if options.Username != "" {
			userFullName += fmt.Sprintf(" (@%s)", options.Username)
		}
		message := fmt.Sprint(userFullName, " —Ö–æ—á–µ –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è")
		return message
	}
	MessageCongregationJoinRequestApprovedDone = func(fullName string) string {
		return fmt.Sprintf("–í—ñ—Å–Ω–∏–∫–∞ *%s* –ø—Ä–∏—î–¥–Ω–∞–Ω–æ –¥–æ –∑–±–æ—Ä—É ‚úÖ", fullName)
	}
	MessageCongregationJoinRequestRejectedDone = func(fullName string) string {
		return fmt.Sprintf("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ *%s* –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ ‚ùå", fullName)
	}
	MessageCongregationJoinRequestApproved = "–ó–∞–ø–∏—Ç –Ω–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –∑–±–æ—Ä—É –ø—Ä–∏–π–Ω—è—Ç–æ üéâ"
	MessageCongregationJoinRequestRejected = "–ó–∞–ø–∏—Ç –Ω–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –∑–±–æ—Ä—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ üòî"

	MessageHowCanIHelpYou          = "–ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏? üôÇ"
	MessageAddTerritoryInstruction = "–ù–∞–¥—ñ—à–ª–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∞–±–æ –¥–æ–∫—É–º–µ–Ω—Ç —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó –¥–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑—Ä–∞–∑–∫—É: *–ì—Ä—É–ø–∞_–Ω–∞–∑–≤–∞* \n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: *–õ—å–≤—ñ–≤_123-–∞*, *–†—ñ–≤–Ω–µ_200* üì∏"
	MessageTerritoryExistsInGroup  = func(title string, groupTitle string) string {
		return fmt.Sprintf("–¢–µ—Ä–∏—Ç–æ—Ä—ñ—è –∑ –Ω–∞–∑–≤–æ—é *%s* –≤–∂–µ —ñ—Å–Ω—É—î –≤ –≥—Ä—É–ø—ñ *%s* ü§∑", title, groupTitle)
	}
	MessageNoTerritoriesFound              = "–¢–µ—Ä–∏—Ç–æ—Ä—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ü§∑"
	MessageTerritoryNotFound               = "–¢–µ—Ä–∏—Ç–æ—Ä—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ ü§∑"
	MessageTerritoryNotAvailable           = "–¢–µ—Ä–∏—Ç–æ—Ä—ñ—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ ü§∑"
	MessageTerritoryList                   = "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–µ—Ä–∏—Ç–æ—Ä—ñ–π: "
	MessageMyTerritoryListTerritoryCaption = func(title string, lastTakenAt time.Time, notes []string) string {
		caption := fmt.Sprintf("–¢–µ—Ä–∏—Ç–æ—Ä—ñ—è: %s\n%s", title, lastTakenAt.Format("02.01.2006"))
		if len(notes) > 0 {
			caption += "\n\n"
			caption += "–ù–æ—Ç–∞—Ç–∫–∏:\n"
			for _, note := range notes {
				caption += fmt.Sprintf("üìå %s\n", note)
			}
		}
		return caption
	}
	MessageTerritoryListTerritoryCaption = func(options MessageTerritoryListTerritoryCaptionOptions) string {
		caption := fmt.Sprintf("–¢–µ—Ä–∏—Ç–æ—Ä—ñ—è: %s", options.Title)
		if !options.LastTakenAt.IsZero() {
			caption += fmt.Sprintf("\n–û—Å—Ç–∞–Ω–Ω—î –æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è: *%s*", options.LastTakenAt.Format("02.01.2006"))
		}

		if options.UserRole == entity.UserRoleAdmin {
			if options.InUseByFullName != "" {
				caption += fmt.Sprintf("\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î: *%s*", options.InUseByFullName)
			}

			if len(options.Notes) > 0 {
				caption += "\n\n"
				caption += "–ù–æ—Ç–∞—Ç–∫–∏:\n"
				for _, note := range options.Notes {
					caption += fmt.Sprintf("üìå %s\n", note)
				}
			}
		}
		return caption
	}

	MessageTakeTerritoryRequest = func(user *entity.User, territoryTitle string) string {
		return fmt.Sprintf("%s —Ö–æ—á–µ –≤–∑—è—Ç–∏ %s", user.FullName, territoryTitle)
	}
	MessageTakeTerritoryRequestSent = "–ó–∞–ø–∏—Ç –Ω–∞ –≤–∑—è—Ç—Ç—è —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ. –û—á—ñ–∫—É–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å üòå"

	MessageTakeTerritoryRequestApproved = func(territoryTitle string, notes []string) string {
		message := fmt.Sprintf("–ó–∞–ø–∏—Ç –Ω–∞ –≤–∑—è—Ç—Ç—è —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó *%s* –ø—Ä–∏–π–Ω—è—Ç–æ ‚úÖ", territoryTitle)
		if len(notes) > 0 {
			message += "\n\n"
			message += "–ù–æ—Ç–∞—Ç–∫–∏:\n"
			for _, note := range notes {
				message += fmt.Sprintf("üìå %s\n", note)
			}
		}
		return message
	}
	MessageTakeTerritoryRequestApprovedDone = func(fullName string, territoryName string) string {
		return fmt.Sprintf("–í—ñ—Å–Ω–∏–∫–∞ *%s* –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –Ω–∞ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—é *%s* ‚úÖ", fullName, territoryName)
	}

	MessageTakeTerritoryRequestRejected = func(territoryTitle string) string {
		return fmt.Sprintf("–ó–∞–ø–∏—Ç –Ω–∞ –≤–∑—è—Ç—Ç—è —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó *%s* –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ ‚ùå", territoryTitle)
	}
	MessageTakeTerritoryRequestRejectedDone = func(fullName string, territoryTitle string) string {
		return fmt.Sprintf("–í—ñ—Å–Ω–∏–∫–∞ *%s* –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ –Ω–∞ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—é *%s* ‚ùå", fullName, territoryTitle)
	}

	MessagePublisherReturnedTerritory = func(fullName string, territoryTitle string) string {
		return fmt.Sprintf("–í—ñ—Å–Ω–∏–∫ *%s* –ø–æ–≤–µ—Ä–Ω—É–≤ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—é *%s* ‚úÖ", fullName, territoryTitle)
	}
	MessageLeaveTerritoryNote = func(territoryTitle string) string {
		return fmt.Sprintf("–ó–∞–ª–∏—à—ñ—Ç—å –Ω–æ—Ç–∞—Ç–∫—É –¥–ª—è —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó %s ‚úçÔ∏è", territoryTitle)
	}
	MessageTerritoryNotInUse        = "–¢–µ—Ä–∏—Ç–æ—Ä—ñ—è –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è ü§∑"
	MessageTerritoryCannotLeaveNote = "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–ª–∏—à–∏—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É –¥–ª—è —Ü—ñ—î—ó —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó ü§∑"
	MessageTerritoryNoteSaved       = "–ù–æ—Ç–∞—Ç–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ ‚úÖ"

	MessageTerritoryReturned = "–¢–µ—Ä–∏—Ç–æ—Ä—ñ—é –ø–æ–≤–µ—Ä–Ω—É—Ç–æ ‚úÖ"

	MessagePublisherNotFound = "–í—ñ—Å–Ω–∏–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ü§∑"
)

type MessageNewJoinRequestOptions struct {
	FirstName string
	LastName  string
	Username  string
}

type MessageTerritoryListTerritoryCaptionOptions struct {
	UserRole        entity.UserRole
	Title           string
	LastTakenAt     time.Time
	Notes           []string
	InUseByFullName string
}
